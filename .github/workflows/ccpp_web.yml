name: C/C++ CI for Web

on:
  push:
    branches: [ web* ]
    #tags: [ v** ]
  pull_request:
    branches: [ web* ]

jobs:
  pre-build:
    runs-on: ubuntu-latest
    outputs: 
      has-update: ${{ !steps.check_siv3d_update.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - run: mkdir dummy

      - name: Check If Rebuild is Required
        id: check_siv3d_update
        uses: actions/cache@v1
        env:
          cache-name: check_siv3d_update-5
        with:
          path: dummy 
          key: ${{ env.cache-name }}-${{ hashFiles('Siv3D/**/*.*', 'Web/CMakeLists.txt') }}

      - name: Install Boost
        uses: ./.github/actions/download-boost
        if: ${{ !steps.check_siv3d_update.outputs.cache-hit }}
        with:
          version: '1.74.0'
          cache-name: cache-boost-headers-1
          destination: Dependencies/boost_1_74_0

  build:
    needs: pre-build
    strategy:
      matrix:
        config:
          - name: wasm
            cmake-cflags: ''
          - name: wasm-mt
            cmake-cflags: '-pthread'
          - name: wasm-simd
            cmake-cflags: '-msimd128 -msse4.2'
          - name: wasm-mt-simd
            cmake-cflags: '-pthread -msimd128 -msse4.2'
          - name: wasm-side-module
            cmake-cflags: '-fPIC'
    container: 
      image: emscripten/emsdk:3.1.20
    runs-on: ubuntu-latest

    outputs: 
      did-build: ${{ needs.pre-build.outputs.has-update }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create build folder
        run: mkdir Web/build

      - name: Cache OpenSiv3D Build result
        id: cache_siv3d_library
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-library-4
        with:
          path: Web/Package
          key: ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Siv3D/**/*.*', 'Web/CMakeLists.txt') }}-${{ hashFiles('Web/*.js') }}
          restore-keys: |
            ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Siv3D/**/*.*', 'Web/CMakeLists.txt') }}
            ${{ matrix.config.name }}-${{ env.cache-name }}-

      - name: Cache boost
        if: ${{ fromJSON(needs.pre-build.outputs.has-update) }}
        uses: actions/cache@v1
        env:
          cache-name: cache-boost-headers-1
        with:
          path: Dependencies/boost_1_74_0
          key: ${{ env.cache-name }}

      - name: Prebuild emscripten ports
        if: ${{ fromJSON(needs.pre-build.outputs.has-update) }}
        run: |
          embuilder.py build ogg vorbis libpng

      - name: Build project
        if: ${{ fromJSON(needs.pre-build.outputs.has-update) }}
        working-directory: Web/build
        run: |
          emcmake cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_INSTALL_PREFIX="$(dirname $(pwd))/Package" ..
          cmake --build . --parallel 4
          cmake --install .

      - name: Bundle output
        working-directory: Web/
        run: |
          cp build/Siv3D.js Package/lib/Siv3D/
          cp ../Siv3D/lib/Web/jslib/Siv3D.pre.js Package/lib/Siv3D/
          cp ../Siv3D/lib/Web/jslib/Siv3D.post.js Package/lib/Siv3D/
          cp ../Siv3D/lib/Web/jslib/Siv3D.SharedMain.js Package/lib/Siv3D/
          cp -r App/resources Package
          cp -r App/example Package   
          cp -r App/Templates Package   
          zip -r OpenSiv3D.zip Package
          tar -cvzf OpenSiv3D.tgz Package/*

      - name: Save Bundles
        uses: actions/upload-artifact@v3
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web/OpenSiv3D.*

  test:
    needs: build
    strategy:
      matrix:
        config:
          - name: wasm
            cmake-cflags: ''
          # - name: wasm-simd
          #  cmake-cflags: '-msimd128 -msse4.2'
    container: 
      image: emscripten/emsdk:3.1.20
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  
      - name: Create build folder  
        run: mkdir Web/CI/App/build

      - name: Cache OpenSiv3D Test Build result
        id: cache_siv3d_test
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-test
        with:
          path: Web/CI/App
          key: ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Web/App/**/*.*', 'Test/**/*.*') }}

      - name: Restore Bundles
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_test.outputs.cache-hit }}
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web
      - name: Restore Siv3D library
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_test.outputs.cache-hit }}
        working-directory: Web
        run: tar -xvf OpenSiv3D.tgz

      - name: Create & Build test project
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_test.outputs.cache-hit }}
        working-directory: Web/CI/App/build
        run: |
          emcmake cmake -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_FIND_ROOT_PATH=$(dirname $(dirname $(dirname $(pwd))))/Package \
            -DCMAKE_C_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cmake-cflags }}" ..
          cmake --build . --target Siv3DTest

      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Test project
        working-directory: Web/CI/App
        run: node --experimental-wasm-simd Siv3DTest.js

  build-app:
    needs: build
    strategy:
      matrix:
        config:
          - name: wasm
            app-name: wasm
            cmake-cflags: ''
            cmake-additional-flags: ''
          - name: wasm-simd
            app-name: wasm-simd
            cmake-cflags: '-msimd128 -msse4.2'
            cmake-additional-flags: ''
          - name: wasm-mt
            app-name: wasm-mt
            cmake-cflags: '-pthread'
            cmake-additional-flags: ''
          - name: wasm-mt-simd
            app-name: wasm-mt-simd
            cmake-cflags: '-pthread -msimd128 -msse4.2'
            cmake-additional-flags: ''
          - name: wasm
            app-name: wasm-wgpu
            cmake-cflags: ''
            cmake-additional-flags: '-DSIV3D_WEBGPU_BACKEND=On'
          - name: wasm-side-module
            app-name: wasm-side-module
            cmake-cflags: ''
            cmake-additional-flags: '-DSIV3D_BUILD_WITH_SHARED_MAIN=On'
    container: 
      image: emscripten/emsdk:3.1.20
    runs-on: ubuntu-latest

    outputs: 
      did-build: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_app.outputs.cache-hit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create build folder
        working-directory: Web/CI/App
        run: |
          mkdir build
          cp -r ../../App/example .

      - name: Cache OpenSiv3D App Build result
        id: cache_siv3d_app
        uses: actions/cache@v1
        env:
          cache-name: cache-siv3d-app-1
        with:
          path: Web/CI/App
          key: ${{ matrix.config.app-name }}-${{ env.cache-name }}-${{ hashFiles('Web/Package/**/*.*', 'Web/App/**/*.*', 'Web/CI/App/**/*.*') }}

      - name: Restore Bundles
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_app.outputs.cache-hit }}
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web

      - name: Restore Siv3D library
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_app.outputs.cache-hit }}
        working-directory: Web
        run: tar -xvf OpenSiv3D.tgz

      - name: Create & Build Siv3d App
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_app.outputs.cache-hit }}
        working-directory: Web/CI/App/build
        run: |
          emcmake cmake -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_FIND_ROOT_PATH=$(dirname $(dirname $(dirname $(pwd))))/Package \
            -DCMAKE_C_FLAGS="${{ matrix.config.cmake-cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cmake-cflags }}" \
            ${{ matrix.config.cmake-additional-flags }} ..
          cmake --build .

      - name: Save Bundles
        uses: actions/upload-artifact@v3
        with:
          name: Siv3DApp-${{ matrix.config.app-name }}
          path: |
            Web/CI/App/Siv3DApp.*
            Web/CI/App/example/

      - name: Save Bundles (Side Module)
        if: ${{ matrix.config.name == 'wasm-side-module' }}
        uses: actions/upload-artifact@v3
        with:
          name: OpenSiv3D-Bundles-wasm-shared-main
          path: |
            Web/CI/App/Siv3D.*
            Web/CI/App/example/

  test-app:
    needs: build-app
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - app-name: wasm
          - app-name: wasm-mt
          - app-name: wasm-simd
          - app-name: wasm-mt-simd
          # - app-name: wasm-wgpu
          - app-name: wasm-side-module
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3.5.0
        with:
          node-version: 16

      - name: Install Prerequisites
        run: |
          npm install -g statikk cdp-gdb-bridge
          cp Web/CI/App/AppRunner.mjs .

      - name: Restore Bundles
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-${{ matrix.config.app-name }}
          path: .

      - name: Restore Bundles (Side Module)
        if: ${{ matrix.config.app-name == 'wasm-side-module' }}
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-wasm-shared-main
          path: .
      
      - name: Test Siv3d App
        if: ${{ matrix.config.app-name != 'wasm-side-module' }}
        run: node AppRunner.mjs -p http://localhost:8080/Siv3DApp.html?timeout=10

      - name: Test Siv3d App (Side Module)
        if: ${{ matrix.config.app-name == 'wasm-side-module' }}
        run: node AppRunner.mjs -p http://localhost:8080/Siv3D.html?timeout=10
      
  build-installer:
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - name: wasm
          - name: wasm-mt
          - name: wasm-simd
          - name: wasm-mt-simd
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache OpenSiv3D Installer result
        id: cache_siv3d_installer
        uses: actions/cache@v1
        env:
          cache-name: cache_siv3d_installer
        with:
          path: Web/WindowsInstaller/Output
          key: ${{ matrix.config.name }}-${{ env.cache-name }}-${{ hashFiles('Web/WindowsInstaller/setup.iss', 'Web/VisualStudioTemplate') }}

      - name: Restore Bundles
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_installer.outputs.cache-hit }}
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: Web

      - name: Restore Siv3D library
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_installer.outputs.cache-hit }}
        working-directory: Web
        run: |
          tar -xvf OpenSiv3D.tgz
          
      - name: Compress Project Template
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_installer.outputs.cache-hit }}
        working-directory: Web/VisualStudioTemplate/Files
        run: |
          7z a -tzip "OpenSiv3D(0.6.6)Web.zip" .
          cp "OpenSiv3D(0.6.6)Web.zip" ..
          
      - name: Create Installer
        if: ${{ fromJSON(needs.build.outputs.did-build) || !steps.cache_siv3d_installer.outputs.cache-hit }}
        working-directory: Web/WindowsInstaller
        run: |
          mkdir -Force Output
          iscc /O"Output" "./Setup.iss"
       
      - name: Save Bundles
        uses: actions/upload-artifact@v3
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: Web/WindowsInstaller/Output/*.exe

  test-installer:
    needs: build-installer
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: wasm
          - name: wasm-mt
          - name: wasm-simd
          - name: wasm-mt-simd
    env:
      MSBuild_path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\bin"
      VSIXInstaller_Path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Installer
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: Web/WindowsInstaller/

      - name: Test Installer
        working-directory: Web/WindowsInstaller
        run: |
          Set-Item Env:Path "$env:VSIXInstaller_Path;$env:Path"
          & ".\OpenSiv3D(0.6.6)Web.exe" /SILENT /SUPPRESSMSGBOXES /LOG="InstallLog.Log"
          Wait-Process -Name "OpenSiv3D(0.6.6)Web"
          cat InstallLog.Log
          $env:SIV3D_0_6_6_WEB = [System.Environment]::GetEnvironmentVariable("SIV3D_0_6_6_WEB","User")
          echo "SIV3D_0_6_6_WEB=$env:SIV3D_0_6_6_WEB" >> $env:GITHUB_ENV
          devenv /installvstemplates

      - name: Install VSIX
        run: |
          Set-Item Env:Path "$env:VSIXInstaller_Path;$env:Path"
          curl -L https://github.com/nokotan/VSExtForEmscripten/releases/download/v0.7.0/Emscripten.Build.Definition.vsix -o Emscripten.vsix
          VSIXInstaller /quiet /admin Emscripten.vsix 
          Wait-Process -Name "VSIXInstaller"

      - name: Install Emscripten
        run: |
          curl -L https://github.com/nokotan/EmscriptenInstaller/releases/download/v0.1.2/EmscriptenOffline.exe -o Emscripten.exe
          & ".\Emscripten.exe" /SILENT /SUPPRESSMSGBOXES
          Wait-Process -Name "Emscripten"
          $env:EMSDK = [System.Environment]::GetEnvironmentVariable("EMSDK","User")
          $env:EMSDK_PYTHON = [System.Environment]::GetEnvironmentVariable("EMSDK_PYTHON","User")
          $env:EMSDK_NODE = [System.Environment]::GetEnvironmentVariable("EMSDK_NODE","User")
          $env:EM_CONFIG = [System.Environment]::GetEnvironmentVariable("EM_CONFIG","User")
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo "EMSDK=$env:EMSDK" >> $env:GITHUB_ENV
          echo "EMSDK_PYTHON=$env:EMSDK_PYTHON" >> $env:GITHUB_ENV
          echo "EMSDK_NODE=$env:EMSDK_NODE" >> $env:GITHUB_ENV
          echo "EM_CONFIG=$env:EM_CONFIG" >> $env:GITHUB_ENV
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
          echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
          echo $env:Path >> $Env:GITHUB_PATH

      - name: Create Project
        run: |
          mkdir Siv3DTest
          7z x "$env:USERPROFILE\Documents\Visual Studio 2022\Templates\ProjectTemplates\OpenSiv3D(0.6.6)Web.zip" -oSiv3DTest
          cp Web\CI\App\Main.cpp Siv3DTest
          cd Siv3DTest
          $Content = Get-Content -path "Siv3DTest.vcxproj"
          $Content -Replace '$guid1$', '4e942135-f309-41d4-8214-c2e5bd7c7ace'
          $Content -Replace '$safeprojectname$', 'Siv3DTest' | Out-File "Siv3DTest.vcxproj"

      - name: Build Sample Project
        working-directory: Siv3DTest
        run: |
          Set-Item Env:Path "$env:MSBuild_Path;$env:Path"
          embuilder build ogg vorbis
          msbuild Siv3DTest.vcxproj /p:BaseOutputPath="Release\Emscripten" /p:BaseOutputPath="." /p:Platform="Emscripten" /p:Configuration="Release"

      - name: Test Siv3d App
        working-directory: Siv3DTest/Emscripten/Release
        run: python $env:EMSDK\upstream\emscripten\emrun.py --timeout 180 --timeout_returncode -1 Siv3DTest.html -- --timeout=10

      - name: Save Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: OpenSiv3D-VisualStudio-App-${{ matrix.config.name }}
          path: |
            Siv3DTest/Emscripten/Release/Siv3DTest.html
            Siv3DTest/Emscripten/Release/Siv3DTest.js
            Siv3DTest/Emscripten/Release/Siv3DTest.wasm
            Siv3DTest/Emscripten/Release/Siv3DTest.data

  pre-deploy:
    if: ${{ contains(github.ref, 'tags/v') }}
    needs: [ test-app, test-installer ]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      html_url: ${{ steps.fix-url.outputs.fixed-url }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - id: fix-url
        run: |
          DownloadUrl="${{ steps.create-release.outputs.html_url }}"
          echo "fixed-url=${DownloadUrl//tag/download}" >> $GITHUB_OUTPUT

  deploy:
    needs: pre-deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config:
          - name: wasm
          - name: wasm-mt
          - name: wasm-simd
          - name: wasm-mt-simd
    steps:
      - name: Restore Bundles
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-${{ matrix.config.name }}
          path: .
      
      - name: Restore Installer
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Installer-${{ matrix.config.name }}
          path: .
      
      - name: Upload Release Asset (zip)
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D.zip
          asset_name: OpenSiv3D-${{ matrix.config.name }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (tgz)
        id: upload-release-asset-tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D.tgz
          asset_name: OpenSiv3D-${{ matrix.config.name }}.tgz
          asset_content_type: application/gzip

      - name: Upload Installer
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.pre-deploy.outputs.upload_url }}
          asset_path: OpenSiv3D(0.6.6)Web.exe
          asset_name: OpenSiv3D-Installer-${{ matrix.config.name }}.exe
          asset_content_type: application/octet-stream


  deploy-gh-pages:
    needs: test-app
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest

    steps:
      - name: Create Destination Folders
        run: |
          mkdir -p dist/v6-wasm-app
          mkdir -p dist/v6-wasm-mt-app
          mkdir -p dist/v6-wasm-simd-app
          mkdir -p dist/v6-wasm-mt-simd-app
          mkdir -p dist/v6-wasm-side-module-app
          mkdir -p dist/v6/lib
          mkdir -p dist/v6/dev/lib

      - name: Place Siv3D Apps (wasm)
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-wasm
          path: dist/v6-wasm-app

      - name: Place Siv3D Apps (wasm-mt)
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-wasm-simd
          path: dist/v6-wasm-simd-app

      - name: Place Siv3D Apps (wasm-simd)
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-wasm-simd
          path: dist/v6-wasm-simd-app

      - name: Place Siv3D Apps (wasm-mt-simd)
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-wasm-simd
          path: dist/v6-wasm-simd-app
          
      - name: Place Siv3D Apps (wasm-webgpu)
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-wasm-wgpu
          path: dist/v6-wasm-wgpu-app

      - name: Restore Bundles (wasm-side-module)
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-wasm-shared-main
          path: Package/lib 

      - name: Place Siv3D library (wasm-side-module)
        if: ${{ contains(github.ref, 'tags/v') }}
        run: |
          cp Package/lib/Siv3D.wasm dist/v6/lib
          cp Package/lib/Siv3D.js dist/v6/lib
          cp Package/lib/Siv3D.data dist/v6/lib
          cp -r Package/lib/example dist/v6/

      - name: Place Siv3D library (wasm-side-module)
        if: ${{ !contains(github.ref, 'tags/v') }}
        run: |
          cp Package/lib/Siv3D.wasm dist/v6/dev/lib
          cp Package/lib/Siv3D.js dist/v6/dev/lib
          cp Package/lib/Siv3D.data dist/v6/dev/lib
          cp -r Package/lib/example dist/v6/dev/

      - name: Place Siv3D Apps (wasm-side-module)
        uses: actions/download-artifact@v3
        with:
          name: Siv3DApp-wasm-side-module
          path: dist/v6-wasm-side-module-app

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.9.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dist
          keep_files: true

  custom-web-hook:
    needs: [ pre-deploy, deploy ]
    runs-on: ubuntu-latest
    
    steps:
      - run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.REPO_GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/nokotan/OpenSiv3DForWeb-VSCode/actions/workflows/update.yml/dispatches" \
          -d '{ "ref": "main", "inputs": { "name": "Update ${{ github.ref }}", "url": "${{ needs.pre-deploy.outputs.html_url }}/OpenSiv3D-wasm.tgz" } }'

  e2e-test-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      browserstack-keys-found: ${{ steps.check-keys.outputs.keys-found }}
    steps: 
      - name: Check Keys
        id: check-keys
        env: 
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
        run: echo "keys-found=${{ env.BROWSERSTACK_USERNAME != '' && env.BROWSERSTACK_ACCESS_KEY != '' }}" >> $GITHUB_OUTPUT

  e2e-test:
    needs: [ build, e2e-test-prerequisites ]
    if: ${{ fromJSON(needs.e2e-test-prerequisites.outputs.browserstack-keys-found) }}
    runs-on: ubuntu-latest
    container: 
      image: 'emscripten/emsdk:3.1.20'

    steps:
      - name: 'BrowserStack Env Setup'  # Invokes the setup-env action
        uses: browserstack/github-actions/setup-env@master
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Restore Bundles
        uses: actions/download-artifact@v3
        with:
          name: OpenSiv3D-Bundles-wasm
          path: .
      - name: Restore Siv3D library
        run: |
          tar -xvf OpenSiv3D.tgz   
          mv Package Web/CI/e2e/src

      - name: Install dependencies
        working-directory: Web/CI/e2e
        run: npm install
      - name: Building web application to be tested
        working-directory: Web/CI/e2e
        run: npm run build
      - name: Running test on BrowserStack  # Invokes the actual test script that would run on BrowserStack browsers
        working-directory: Web/CI/e2e
        run: npm test  # See sample test script above
