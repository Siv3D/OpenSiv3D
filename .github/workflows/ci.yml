name: C/C++ CI

on:
  push:
    branches:
    - main
    - v6_develop
    - v6_linux_*
  pull_request:
    branches:
    - main
    - v6_develop
    - v6_linux_*

jobs:
  Linux:

    strategy:
      fail-fast: false
      matrix:
        config:
          - runs-on: ubuntu-20.04
            install-compiler-command:
            cmake-additional-flags:
            boost-package: libboost1.71-dev
          - runs-on: ubuntu-22.04
            install-compiler-command:
            cmake-additional-flags:
            boost-package: libboost1.74-dev
          - runs-on: ubuntu-22.04
            install-compiler-command:
            cmake-additional-flags: -DCMAKE_CXX_COMPILER=clang-14 -DCMAKE_C_COMPILER=clang-14
            boost-package: libboost1.74-dev

    runs-on: ${{ matrix.config.runs-on }}
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"

    steps:
    - uses: actions/checkout@v2

    - name: Install packages
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update
        ${{ matrix.config.install-compiler-command }}
        sudo apt install ninja-build
        sudo apt install libasound2-dev
        sudo apt install libavcodec-dev
        sudo apt install libavformat-dev
        sudo apt install libavutil-dev
        sudo apt install ${{ matrix.config.boost-package }}
        sudo apt install libcurl4-openssl-dev
        sudo apt install libgtk-3-dev
        sudo apt install libgif-dev
        sudo apt install libglu1-mesa-dev
        sudo apt install libharfbuzz-dev
        sudo apt install libmpg123-dev
        sudo apt install libopencv-dev
        sudo apt install libopus-dev
        sudo apt install libopusfile-dev
        sudo apt install libsoundtouch-dev
        sudo apt install libswresample-dev
        sudo apt install libtiff-dev
        sudo apt install libturbojpeg0-dev
        sudo apt install libvorbis-dev
        sudo apt install libwebp-dev
        sudo apt install libxft-dev
        sudo apt install uuid-dev
        sudo apt install xorg-dev

    - name: Configure Siv3D
      working-directory: Linux
      run: |
        mkdir build && cd build
        cmake ${{ matrix.config.cmake-additional-flags }} -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo ..

    - name: Build Siv3D
      working-directory: Linux
      run: |
        cmake --build build

    - name: Configure Siv3DTest
      working-directory: Linux/App
      run: |
        mkdir build && cd build
        cmake ${{ matrix.config.cmake-additional-flags }} -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo ..

    - name: Build Siv3DTest
      working-directory: Linux/App
      run: |
        cmake --build build

    - name: Run Siv3DTest
      working-directory: Linux/App
      run: |
        cd build
        cmake ${{ matrix.config.cmake-additional-flags }} -DBUILD_TESTING:BOOL=ON .
        ctest --output-on-failure --verbose
