//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2020 Ryo Suzuki
//	Copyright (c) 2016-2020 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include <cassert>
# include <ThirdParty/Xoshiro-cpp/XoshiroCpp.hpp>
# include <ThirdParty/SMFT/SMFT.hpp>
# include "Common.hpp"
# include "Number.hpp"
# include "HardwareRNG.hpp"

namespace s3d
{
	namespace PRNG
	{
		/// <summary>
		/// SFMT 19937 / Pseudo random number generator
		/// Result: 64-bit value
		/// Period: 2^19937-1
		/// Footprint: 2,512 bytes
		/// </summary>
		class SFMT19937_64
		{
		public:

			using State_t = detail::SFMT_T;

		private:

			State_t m_state;

		public:

			static constexpr size_t SeedSequencCount = 16;

			/// <summary>
			/// 生成される整数値の型
			/// The integral type generated by the engine
			/// </summary>
			using result_type = uint64;

			/// <summary>
			/// 乱数エンジンを作成し、内部状態を非決定的な乱数で初期化します。
			/// Constructs the engine and initializes the state with non-deterministic random numbers
			/// </summary>
			SFMT19937_64();

			/// <summary>
			/// 乱数エンジンを作成し、内部状態を初期化します。
			/// Constructs the engine and initializes the state.
			/// </summary>
			/// <param name="seed">
			/// 内部状態の初期化に使われるシード値
			/// seed value to use in the initialization of the internal state
			/// </param>
			explicit SFMT19937_64(uint64 seed) noexcept;

			explicit SFMT19937_64(const std::array<uint64, SeedSequencCount>& seeds) noexcept;

			void seed(uint64 seed) noexcept;

			void seed(const std::array<uint64, SeedSequencCount>& seeds) noexcept;

			/// <summary>
			/// 生成される乱数の最小値を返します。
			/// Returns the minimum value potentially generated by the random-number engine
			/// </summary>
			/// <returns>
			/// 生成される乱数の最小値
			/// The minimum potentially generated value
			/// </returns>
			[[nodiscard]]
			static constexpr result_type min() noexcept;

			/// <summary>
			/// 生成される乱数の最大値を返します。
			/// Returns the maximum value potentially generated by the random-number engine.
			/// </summary>
			/// <returns>
			/// 生成される乱数の最大値
			/// The maximum potentially generated value
			/// </returns>
			[[nodiscard]]
			static constexpr result_type max() noexcept;

			/// <summary>
			/// 乱数を生成します。
			/// Generates a pseudo-random value.
			/// </summary>
			/// <returns>
			/// 生成された乱数
			/// A generated pseudo-random value
			/// </returns>
			result_type operator()() noexcept;

			/// <summary>
			/// [0, 1) の範囲の乱数を生成します。
			/// Generates a pseudo-random value in [0, 1)
			/// </summary>
			/// <returns>
			/// 生成された乱数
			/// A generated pseudo-random value
			/// </returns>
			double generateReal() noexcept;

			[[nodiscard]]
			constexpr const State_t& serialize() const noexcept;

			constexpr void deserialize(const State_t& data) noexcept;
		};
	}
}

# include "detail/SMFT.ipp"
